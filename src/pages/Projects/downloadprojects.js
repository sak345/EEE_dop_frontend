import React, {useEffect, useState} from 'react';
import ProjectHeader from '../../components/projectheader';
import Navbar from '../../components/navbar'; 
import axios from 'axios';
import { NavLink } from "react-router-dom";
import styles from '../../styles';

// async function DownloadProjectsPage() {
//   const [startDate, setStartDate] = useState(null)
//   const [endDate, setEndDate] = useState(null)
//   const [status, setStatus] = useState("ongoing")
  
//   const handleDownload= ()=>{
//     let data = JSON.stringify({
//       "start_date": startDate,
//       "end_date": endDate,
//       "status": status
//     })

//   try {
//     // Fetch the CSV data from the API endpoint
//     const response = axios.get(process.env.REACT_APP_BACKEND_URL + "admin/paper/download", {
//       responseType: "blob",
//     });
//     const csvData = await response.data.text();

//     // Convert the CSV data into an array of papers
//     const papersArray = await csvData.split("\n");

//     // Create a new instance of jsPDF and set up the document
//     const pdf = new jsPDF();
//     pdf.setFontSize(12);
//     pdf.text("List of Papers", 10, 10);

//     // Loop through the papers array and add each paper to the PDF
//     for (let i = 0; i < papersArray.length; i++) {
//       pdf.text(papersArray[i], 10, (i + 2) * 10);
//     }

//     // Convert the PDF to a Blob object
//     const pdfBlob = pdf.output("blob");

//     // Create a download link and click it to trigger the download
//     const downloadLink = window.URL.createObjectURL(pdfBlob);
//     const link = document.createElement("a");
//     link.href = downloadLink;
//     link.download = "papers.pdf";
//     link.click();

//     // Clean up the download link
//     window.URL.revokeObjectURL(downloadLink);
//   } catch (error) {
//     console.log(error);
//   }
//     }
// function DownloadProjectsPage() {
//   const [startDate, setStartDate] = useState(null)
//   const [endDate, setEndDate] = useState(null)
//   const [status, setStatus] = useState("ongoing")
  
//   const handleDownload= ()=>{
//     let data = JSON.stringify({
//       "start_date": startDate,
//       "end_date": endDate,
//       "status": status
//     })

//     try {
//       let config = {
//         method: "get",
//         maxBodyLength: Infinity,
//         url: process.env.REACT_APP_BACKEND_URL + "admin/paper/download",
//         headers: {
//           Authorization: localStorage.getItem("Token"),
//         },
//         data: data,
//         responseType: "blob"
//       };
//       // console.log("uri:",process.env.REACT_APP_BACKEND_URL + "paper/download", "start_date:", startDate,
//       // "end_date:", endDate,
//       // "status: ", status);
//       axios.request(config)
//           .then((response) => {
//           // console.log(JSON.stringify(response.data));
//           // setData(response.data.papers)
//           // console.log(response.data.papers)
//           if(response.status == 200) {
//             console.log("Downloaded succesfully")
//           }
//           const csvData = response.data.text(); // convert binary data to text
//           const papersArray = csvData.split("\n"); // split the csv data into an array of papers
//           this.setState({ papers: papersArray }, () => {
//           this.generatePDF();
//       });
//           // window.location.reload(); // Reload the page after successful request
//         })
//         .catch((error) => {
//           console.log(error);
//         });

//       } catch (err) {
//         console.error(err);
//       }
//     }
    
// function DownloadProjectsPage() {
//   const [startDate, setStartDate] = useState(null);
//   const [endDate, setEndDate] = useState(null);
//   const [status, setStatus] = useState("ongoing");

//   const handleDownload = async () => {
//     let data = JSON.stringify({
//       start_date: startDate,
//       end_date: endDate,
//       status: status,
//     });

//     try {
//       let config = {
//         method: "get",
//         maxBodyLength: Infinity,
//         url: process.env.REACT_APP_BACKEND_URL + "admin/paper/download",
//         headers: {
//           Authorization: localStorage.getItem("Token"),
//         },
//         data: data,
//         responseType: "blob",
//       };

//       const response = await axios.request(config);

//       if (response.status === 200) {
//         console.log("Downloaded successfully");
//       }

//       const csvData = await response.data.text(); // convert binary data to text
//       const papersArray = csvData.split("\n"); // split the csv data into an array of papers

//       // Create a new PDF document
//       const pdf = new jsPDF();

//       // Set the document metadata
//       pdf.setProperties({
//         title: "List of Papers",
//         subject: "Generated by My App",
//         author: "My App",
//       });

//       // Add a title to the document
//       pdf.setFontSize(16);
//       pdf.text("List of Papers", 14, 20);

//       // Add a table of papers to the document
//       pdf.autoTable({
//         startY: 30,
//         head: [["Title", "Author", "Year", "Status"]],
//         body: papersArray.map((paper) => paper.split(",")),
//       });

//       // Save the PDF document
//       pdf.save("papers.pdf");
//     } catch (error) {
//       console.log(error);
//     }
//   };
const DownloadProjectsPage = () => {
  const [csvData, setCsvData] = useState("");
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [status, setStatus] = useState("ongoing");

  const handleDownload = () => {
    console.log("toeken: ",localStorage.getItem('Token'));
    let data = JSON.stringify({
  "start_date": startDate,
  "end_date": endDate,
  "status": status
});
console.log(data) 
let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: process.env.REACT_APP_BACKEND_URL+ 'admin/paper/download',
  headers: { 
    'Authorization': 'Bearer'+ localStorage.getItem('Token'), 
    'Content-Type': 'application/json'
  },
  data : data
};

axios.request(config)
.then((response) => {
  setCsvData(response.data)
})
.catch((error) => {
  console.log(error);
  setCsvData("")
});
console.log(csvData)
  };
  return (
    <div>
      <Navbar/>
      {/* <ProjectHeader/> */}
      <header >
            <h1 style={styles.pageTitle}>Projects</h1>

            <nav style={styles.nav}>
                <ul style={styles.navContainer}>
                    <li style={styles.firstChild}>
                        <NavLink to="/enterproject"><button className="button-nav">Enter Project</button></NavLink>
                    </li>
                    <li>
                        <NavLink to="/project"><button className="button-nav">All Projects</button></NavLink>
                    </li>
                    <li>
                        <NavLink to="/submittedproject"><button className="button-nav">Submitted Projects</button></NavLink>
                    </li>
                    <li>
                        <NavLink to="/rejectedproject"><button className="button-nav">Rejected Projects</button></NavLink>
                    </li>
                    <li>
                        <NavLink to="/ongoingproject"><button className="button-nav">Ongoing Projects</button></NavLink>
                    </li>
                    <li>
                        <NavLink to="/completedproject"><button className="button-nav">Completed Projects</button></NavLink>
                    </li>
                    <li style={styles.lastChild}>
                        <NavLink to="/downloadproject"><button className="button-nav-1">Download Projects</button></NavLink>
                    </li>
                </ul>
            
            </nav>
        </header>

      <div className="site-layout" style={{ padding: "0 50px" }}>
        <div style={{ padding: 24, minHeight: 380 }}>

        <table>
        <thead>
          <tr>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Status</th>
            <th>Fetch</th>
            <th>Download</th>
          </tr>
        </thead>
        <tbody>

            <td>
                 <input type='date' id="startDate" required
                 // value={submissionDate}
                 onChange={(e) => setStartDate(e.target.value)}
                 />
            </td>

            <td>
                 <input type='date' id="endDate" required
                 // value={submissionDate}
                 onChange={(e) => setEndDate(e.target.value)}
                 />
            </td>

            <td>
            <select  style={styles.dropMenu}  data-id="1" onChange={(e)=>setStatus(e.target.value)}>
                      <option value="ongoing">Ongoing</option>
                      <option value="completed">Completed</option>
                      <option value="rejected">Rejected</option>
                      <option value="submitted">Submitted</option>
                      <option value="all">All Projects</option>
            </select>
            </td>

            <td><button onClick={(e) => handleDownload(e)}>Fetch</button></td>
             <td>{csvData && (
              <a
                href={`data:text/csv;charset=utf-8,${(csvData)}`}
                download="filename.csv"
                onClick={() => setCsvData("")}
              >
                download
              </a>
            )}</td>


        </tbody>
      </table>

        </div>
      </div>
       
      

    </div>
  );
}

export default DownloadProjectsPage;